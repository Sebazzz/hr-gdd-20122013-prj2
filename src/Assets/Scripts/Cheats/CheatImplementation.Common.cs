using System.Collections;
using UnityEngine;

/// <summary>
/// Cheat implementation class. These public static members are called via reflection only.
/// </summary>
/// <remarks>
/// <para>
/// The guide to writing cheat commands:
///   <para>
///     The cheats are just simple public static methods decorated with an <see cref="CheatCommandAttribute"/>. The cheats
///     are called with the command name specified by the attribute <see cref="CheatCommandAttribute.Name"/>. The cheats
///     can accept parameters but only in the form of simple types (<c>int, long, double, float, string</c>). Overloading
///     of the cheat methods and thus supplying default parameters is not supported.
///   </para>
///   <para>
///     Documentation of the cheats is generated by splitting the pascalcased words of the method name, lowering
///     them and the upper the first letter. "ForExampleThisIsAMethod" is turned in "For example this is a method".
///     The attribute <see cref="CheatCommandAttribute.Name"/> and the names of the parameters are left as-is.
///   </para>
/// </para>
/// 
/// <para>
/// The guide to writing variabeles:
///   <para>
///     The actual variabeles are public static fields decorated with the <see cref="CheatVariabeleAttribute"/>. These 
///     variabeles are defined in the <see cref="CheatVariables"/> class and take effect usually after a level reload. 
///     The responsibility of applying cheat variabeles is taken by the <see cref="CheatsController"/> class. 
///     The actual documentation of the variabeles is done by the <see cref="CheatVariabeleAttribute"/>. The
///     variables can only of a primitive type. Variabeles are set using the <see cref="SetAVariabeleToTheSpecifiedValue"/> command.
///   </para>
/// </para>
/// </remarks>
public static partial class CheatImplementation {
    #region Support methods

    private static bool StartCoroutine(IEnumerator coroutineResult) {
        CheatsController controller = AssertGetCheatsController();

        if (controller == null) {
            return false;
        }

        controller.StartCoroutine(coroutineResult);
        return true;
    }

    private static CheatsController AssertGetCheatsController() {
        GameObject worldObject = GameObject.FindGameObjectWithTag(Tags.World);

        if (worldObject != null) {
            var ctrl = worldObject.GetComponent<CheatsController>();

            if (ctrl != null) {
                return ctrl;
            }
        }

        CheatNotificationDialog.ShowDialog("Error",
                                           "You're not currently in a level and the command cannot be executed therefore.");
        return null;
    }

    #endregion
}